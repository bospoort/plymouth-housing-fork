name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  test-stored-procedures:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --name sqlserver --health-cmd "/opt/mssql-tools18/bin/sqlcmd -S
          localhost -U sa -P YourStrong@Passw0rd -C -Q 'SELECT 1' || exit 1"
          --health-interval 10s --health-timeout 10s --health-retries 10
          --health-start-period 60s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to be fully ready..."
          sleep 15

      - name: Install SQL Server tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
          sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
          sudo apt-get update
          sudo apt-get install -y mssql-tools18 unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bash_profile
          source ~/.bash_profile

      - name: Create test database
        run: |
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -Q "CREATE DATABASE Inventory;"
          echo "Test database created successfully"

      - name: Deploy database tables
        run: |
          echo "Deploying database tables..."
          for file in ./database/tables/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file"
            fi
          done

      - name: Deploy database dependencies
        run: |
          echo "Deploying database dependencies..."
          for file in ./database/dependencies/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file"
            fi
          done

      - name: Deploy database types
        run: |
          echo "Deploying database types..."
          for file in ./database/types/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file"
            fi
          done

      - name: Deploy database procedures
        run: |
          echo "Deploying database procedures..."
          for file in ./database/procedures/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file"
            fi
          done

      - name: Deploy database data_seed
        run: |
          echo "Deploying database data_seed..."
          for file in ./database/data_seed/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file"
            fi
          done

      - name: Deploy database data_test
        run: |
          echo "Deploying database data_test..."
          for file in ./database/data_test/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file"
            fi
          done

      - name: Run tests
        run: |
          echo "Running stored procedure tests..."
          for file in ./tests/*.sql; do
            if [ -f "$file" ]; then
              echo "Running test: $file"
              /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d Inventory -i "$file" -b
              if [ $? -ne 0 ]; then
                echo "Test failed: $file"
                exit 1
              fi
              echo "Test passed: $file"
            fi
          done

      - name: Generate test report
        if: always()
        run: |
          echo "Generating test report..."
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -Q "
          SELECT 
            'Test Results Summary' as Report,
            @@VERSION as SQLServerVersion,
            GETDATE() as TestRunTime
          " -o test-results.txt
          cat test-results.txt

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt

  build_and_deploy_job:
    if:
      github.event_name == 'push' || (github.event_name == 'pull_request' &&
      github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token:
            ${{
            secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_AGREEABLE_PEBBLE_071028410
            }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: '/' # App source code path
          api_location: '' # Api source code path - optional
          output_location: 'dist' # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token:
            ${{
            secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_AGREEABLE_PEBBLE_071028410
            }}
          action: 'close'
