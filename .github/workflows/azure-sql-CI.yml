  test-stored-procedures:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P
          YourStrong@Passw0rd -Q 'SELECT 1' || exit 1" --health-interval 10s
          --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to be fully ready..."
          sleep 15

      - name: Create test database
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -Q "CREATE DATABASE Inventory;"
          echo "Test database created successfully"

      - name: Deploy database tables
        run: |
          echo "Deploying database tables..."
          for file in ./database/tables/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database dependencies
        run: |
          echo "Deploying database dependencies..."
          for file in ./database/dependencies/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database types
        run: |
          echo "Deploying database types..."
          for file in ./database/types/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database procedures
        run: |
          echo "Deploying database procedures..."
          for file in ./database/procedures/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database data_seed
        run: |
          echo "Deploying database data_seed..."
          for file in ./database/data_seed/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d Inventory -i "$file"
            fi
          done

      - name: Deploy database data_test
        run: |
          echo "Deploying database data_test..."
          for file in ./database/data_test/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d Inventory -i "$file"
            fi
          done

      - name: Run tests
        run: |
          echo "Running stored procedure tests..."
          for file in ./tests/*.sql; do
            if [ -f "$file" ]; then
              echo "Running test: $file"
              /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d TestDB -i "$file" -b
              if [ $? -ne 0 ]; then
                echo "Test failed: $file"
                exit 1
              fi
              echo "Test passed: $file"
            fi
          done

      - name: Generate test report
        if: always()
        run: |
          echo "Generating test report..."
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -d TestDB -Q "
          SELECT 
            'Test Results Summary' as Report,
            @@VERSION as SQLServerVersion,
            GETDATE() as TestRunTime
          " -o test-results.txt
          cat test-results.txt

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt
